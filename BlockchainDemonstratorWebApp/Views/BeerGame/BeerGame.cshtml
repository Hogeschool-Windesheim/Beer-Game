@using BlockchainDemonstratorApi.Models.Classes
@using Newtonsoft.Json;
@model BlockchainDemonstratorApi.Models.Classes.Player

@{ ViewData["Title"] = "BeerGame";
    int currentDay = (int)ViewData["CurrentDay"];
    string gameId = (string)ViewData["GameId"];
    bool gameReady = (bool)ViewData["GameReady"];
    string containerDisplay = (gameReady) ? "" : "display:none";
    bool thirdPhaseNotReady = (bool)ViewData["ThirdPhaseNotReady"];
    List<Player> players = (List<Player>)ViewData["Players"];

    int modelIndex = players.FindIndex(p => p.Id == Model.Id);
    string firstPlayerName = players[(0 >= modelIndex) ? 1 : 0].Name;
    string secondPlayerName = players[(1 >= modelIndex) ? 2 : 1].Name;
    string thirdPlayerName = players[(2 >= modelIndex) ? 3 : 2].Name;
    string firstPlayerRole = players[(0 >= modelIndex) ? 1 : 0].Role.Id;
    string secondPlayerRole = players[(1 >= modelIndex) ? 2 : 1].Role.Id;
    string thirdPlayerRole = players[(2 >= modelIndex) ? 3 : 2].Role.Id;

    string profitPlayer = (Model.Profit >= 0) ? "€" + Model.Profit : "-€" + (Model.Profit * -1);
    string profitTeam = (players.Sum(p => p.Profit) >= 0) ? "€" + players.Sum(p => p.Profit) : "-€" + (players.Sum(p => p.Profit) * -1);
    string balancePlayer = (Model.Balance >= 0) ? "€" + Model.Balance : "-€" + (Model.Balance * -1);
    string balanceTeam = (players.Sum(p => p.Balance) >= 0) ? "€" + players.Sum(p => p.Balance) : "-€" + (players.Sum(p => p.Balance) * -1);

    int currentRound = (int)Math.Ceiling((double)currentDay / (double)Factors.RoundIncrement);
    string ordinalSuffix = "th";
    if (currentRound == 1) ordinalSuffix = "st";
    if (currentRound == 2) ordinalSuffix = "nd";
    if (currentRound == 3) ordinalSuffix = "rd";

    string lastOrder = (currentRound == 1) ? "none" : Model.OutgoingOrders.Last().Volume.ToString();
}
<head>
    <link rel="stylesheet" href="~/css/site2.css">
</head>

@if (!gameReady)
{
    <div class="lds">
        <h1>Waiting for players</h1>
        <div class="lds-ring"><div></div><div></div><div></div><div></div></div>
    </div>
}

<div class="top-container" style="@containerDisplay">
    <div class="main-canvas box">
        <div class="customer-text">
            <span style="text-align:center" class="tertiary-text">Customer</span>
        </div>
        <div class="first-player-text">
            <span style="text-align:center" class="tertiary-text">@firstPlayerRole</span>
            <span style="text-align:center" class="secondary-text">@firstPlayerName</span>
        </div>
        <div class="second-player-text">
            <span style="text-align:center" class="tertiary-text">@secondPlayerRole</span>
            <span style="text-align:center" class="secondary-text">@secondPlayerName</span>
        </div>
        <div class="third-player-text">
            <span style="text-align:center" class="tertiary-text">@thirdPlayerRole</span>
            <span style="text-align:center" class="secondary-text">@thirdPlayerName</span>
        </div>
        <div class="harvester-text">
            <span style="text-align:center" class="tertiary-text">Harvester</span>
        </div>

        <div class="backorder-value">
            <span id="backorder-@Model.Role.Id" style="margin-bottom:5%" class="head-text">@Model.Backorder</span>
        </div>
        <div class="backorder-text">
            <span style="text-align:center" class="secondary-text">Backorder</span>
        </div>
        <div class="incoming-order-value">
            <span id="incoming-order-@Model.Role.Id" style="margin-bottom:5%" class="head-text">@Model.IncomingOrders.Where(o => o.OrderDay == currentDay - Factors.RoundIncrement).Sum(o => o.Volume)</span>
        </div>
        <div class="incoming-order-text">
            <span style="text-align:center" class="secondary-text">Incoming order</span>
        </div>
        <div class="inventory-value">
            <span id="inventory-@Model.Role.Id" style="margin-bottom:5%" class="head-text">@Model.Inventory</span>
        </div>
        <div class="inventory-text">
            <span style="text-align:center" class="secondary-text">Inventory</span>
        </div>
        <div class="incoming-delivery-value">
            <span id="incoming-delivery-@Model.Role.Id" style="margin-bottom:5%" class="head-text">@Model.OutgoingOrders.Sum(o => o.Deliveries.Where(d => d.ArrivalDay >= currentDay && d.ArrivalDay < currentDay + Factors.RoundIncrement).Sum(d => d.Volume))</span>
        </div>
        <div class="incoming-delivery-text">
            <span id="incoming-delivery-@Model.Role.Id" style="text-align:center" class="secondary-text">Incoming delivery</span>
        </div>
    </div>
    <div>
        <div class="top-right-canvas gradient box">
            <span style="color:white; margin-top:-5px;" class="main-text">@Model.Name</span>
            <span style="color:white" class="secondary-text">@Model.Role.Id</span>
        </div>
        <div class="right-canvas box">
            <span class="main-text">Cash position</span>
            <div class="cash-position-box">
                <span class="secondary-text">Whole supplychain status</span>
                <span class="tertiary-text cash-position-value">Balance: <span id="balance-team" class="gradient-font">@balanceTeam,-</span></span>
                <span class="tertiary-text cash-position-value">Profit: <span id="profit-team" class="gradient-font">@profitTeam,-</span></span>
            </div>
            <div class="cash-position-box">
                <span class="secondary-text">Your supplychain status</span>
                <span class="tertiary-text cash-position-value">Balance: <span id="balance-@Model.Role.Id" class="gradient-font">@balancePlayer,-</span></span>
                <span class="tertiary-text cash-position-value">Profit: <span id="profit-@Model.Role.Id" class="gradient-font">@profitPlayer,-</span></span>
            </div>
        </div>
    </div>
</div>
<div class="bottom-container" style="@containerDisplay">
    <div class="bottom-canvas box">
        <div>
            <span id="current-round" style="width:fit-content" class="main-text gradient-font">@currentRound</span>
            <span style="margin-left:-3px" id="ordinal-suffix" class="tertiary-text gradient-font">@ordinalSuffix</span>
        </div>
        <span class="secondary-text">Round</span>
    </div>
    <div style="padding:0px" class="bottom-canvas box">
        <input id="place-order-text" name="order" class="input secondary-text" type="text" placeholder="Insert order...">
        <input id="place-order-button" style="color:white" class="order-button gradient secondary-text" type="button" value="Place order">
    </div>
    <div class="bottom-canvas box">
        <span class="main-text">Order history</span>
        <span class="tertiary-text">Last order: <span id="last-order-@Model.Role.Id" class=" secondary-text gradient-font">@lastOrder</span></span>
    </div>
</div>

@section Scripts{
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/js/BeerGame.js"></script>
    <script>
        $(document).ready(() => {
            BeerGame.init("@gameId", "@Model.Id", "@ViewData["RestApiUrl"]");
            $("#place-order-button").on('click', BeerGame.Signal.sendOrder);
            if (@if(thirdPhaseNotReady){@Html.Raw("true || ");}@currentDay == 7 * 8 + 1 && "@if(Model.ChosenOption != null){@Html.Raw(Model.ChosenOption.Name);}else{@Html.Raw("null");}" == "Basic") {
                BeerGame.promptOptions(); //TODO: get promptoptions working
                @foreach(Player player in players)
                {
                    if (player.ChosenOption != null) @Html.Raw($"BeerGame.updatePromptOptions('{JsonConvert.SerializeObject(player)}');\n");
                }
            }
            if ("@Model.Role.Id" == "Retailer") {
                $(".main-canvas").css("background", "url('/images/retailer.png'), white");
            }
            else if ("@Model.Role.Id" == "Manufacturer") {
                $(".main-canvas").css("background", "url('/images/manufacturer.png'), white");
            }
            else if ("@Model.Role.Id" == "Processor") {
                $(".main-canvas").css("background", "url('/images/processor.png'), white");
            }
            else if ("@Model.Role.Id" == "Farmer") {
                $(".main-canvas").css("background", "url('/images/farmer.png'), white");
            }
            $(".main-canvas").css("background-size", "contain");
            $(".main-canvas").css("background-repeat", "no-repeat");
            $(".main-canvas").css("background-position", "center");
        });
    </script>
}