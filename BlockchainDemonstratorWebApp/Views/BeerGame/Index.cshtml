@using BlockchainDemonstratorApi.Models.Classes
@using Newtonsoft.Json;
@model BlockchainDemonstratorApi.Models.Classes.Player

@{
    ViewData["Title"] = "BeerGame";
    int currentDay = (int)ViewData["CurrentDay"];
    string gameId = (string)ViewData["GameId"];
    bool gameReady = (bool)ViewData["GameReady"];
    string containerDisplay = (gameReady) ? "" : "display:none";
    bool thirdPhaseNotReady = (bool)ViewData["ThirdPhaseNotReady"];
    List<Player> players = (List<Player>)ViewData["Players"];

    int modelIndex = players.FindIndex(p => p.Id == Model.Id);

    string firstPlayerInventory = "";
    string secondPlayerInventory = "";
    string thirdPlayerInventory = "";

    string firstPlayerBackorder = "";
    string secondPlayerBackorder = "";
    string thirdPlayerBackorder = "";

    string firstPlayerName = "";
    string secondPlayerName = "";
    string thirdPlayerName = "";

    string firstPlayerRole = "";
    string secondPlayerRole = "";
    string thirdPlayerRole = "";

    string profitPlayer = "";
    string profitTeam = "";
    string balancePlayer = "";
    string balanceTeam = "";

    string waiting = (players.Any(p => p.CurrentOrder == null) && Model.CurrentOrder != null).ToString().ToLower();

    if (players.Count == 4)
    {
        modelIndex = players.FindIndex(p => p.Id == Model.Id);

        firstPlayerInventory = players[(0 >= modelIndex) ? 1 : 0].Inventory.ToString();
        secondPlayerInventory = players[(1 >= modelIndex) ? 2 : 1].Inventory.ToString();
        thirdPlayerInventory = players[(2 >= modelIndex) ? 3 : 2].Inventory.ToString();

        firstPlayerBackorder = players[(0 >= modelIndex) ? 1 : 0].Backorder.ToString();
        secondPlayerBackorder = players[(1 >= modelIndex) ? 2 : 1].Backorder.ToString();
        thirdPlayerBackorder = players[(2 >= modelIndex) ? 3 : 2].Backorder.ToString();

        firstPlayerName = players[(0 >= modelIndex) ? 1 : 0].Name;
        secondPlayerName = players[(1 >= modelIndex) ? 2 : 1].Name;
        thirdPlayerName = players[(2 >= modelIndex) ? 3 : 2].Name;

        firstPlayerRole = players[(0 >= modelIndex) ? 1 : 0].Role.Id;
        secondPlayerRole = players[(1 >= modelIndex) ? 2 : 1].Role.Id;
        thirdPlayerRole = players[(2 >= modelIndex) ? 3 : 2].Role.Id;

        profitPlayer = (Model.Profit >= 0) ? "€" + Model.Profit : "-€" + (Model.Profit * -1);
        profitTeam = (players.Sum(p => p.Profit) >= 0) ? "€" + players.Sum(p => p.Profit) : "-€" + (players.Sum(p => p.Profit) * -1);
        balancePlayer = (Model.Balance >= 0) ? "€" + Model.Balance : "-€" + (Model.Balance * -1);
        balanceTeam = (players.Sum(p => p.Balance) >= 0) ? "€" + players.Sum(p => p.Balance) : "-€" + (players.Sum(p => p.Balance) * -1);

        if (!profitPlayer.Contains(",")) profitPlayer += ",";
        if (!profitTeam.Contains(",")) profitTeam += ",";
        if (!balancePlayer.Contains(",")) balancePlayer += ",";
        if (!balanceTeam.Contains(",")) balanceTeam += ",";
    }

    int currentRound = (int)Math.Ceiling((double)currentDay / (double)Factors.RoundIncrement);
    string ordinalSuffix = "th";
    if (currentRound == 1) ordinalSuffix = "st";
    if (currentRound == 2) ordinalSuffix = "nd";
    if (currentRound == 3) ordinalSuffix = "rd";

    string lastOrder = (currentRound == 1) ? "none" : Model.OutgoingOrders.Last().Volume.ToString();
    double totalProfitCosts = Model.Payments.Where(p => p.DueDay <= currentDay && p.DueDay > currentDay - Factors.RoundIncrement).Select(p => p.Amount).Sum();
    string totalProfitCostsString = totalProfitCosts >= 0 ? "€" : "-€";
    totalProfitCostsString += Math.Abs(totalProfitCosts) + ",-";
    string totalProfitCostsColor = totalProfitCosts >= 0 ? "green" : "red";
    int round = 1;
}
<head>
    <link rel="stylesheet" href="~/css/BeerGame.css">
</head>

@if (!gameReady)
{
    <div class="lds">
        <h1 class="main-text" style="margin-bottom: 80px">Waiting for players</h1>
        <div class="cssload-dots">
            <div class="cssload-dot"></div>
            <div class="cssload-dot"></div>
            <div class="cssload-dot"></div>
            <div class="cssload-dot"></div>
            <div class="cssload-dot"></div>
        </div>
        <svg version="1.1" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <filter id="goo">
                    <feGaussianBlur in="SourceGraphic" result="blur" stdDeviation="12"></feGaussianBlur>
                    <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0	0 1 0 0 0	0 0 1 0 0	0 0 0 18 -7" result="goo"></feColorMatrix>
                    <!--<feBlend in2="goo" in="SourceGraphic" result="mix" ></feBlend>-->
                </filter>
            </defs>
        </svg>
    </div>
}

<div class="top-container" style="@containerDisplay">
    <div class="main-canvas box">
        <div class="customer-text">
            <span style="text-align:center" class="tertiary-text">Customer</span>
        </div>
        @if (Model.ChosenOption.Name.Equals("DLT"))
        {
            <div class="first-player-text" style="top: 65px">
                <span id="first-player-role" style="text-align:center" class="tertiary-text">@firstPlayerRole</span>
                <span id="first-player-name" style="text-align:center" class="secondary-text">@firstPlayerName</span>
                <span id="first-player-inventory" style="margin-top: 50px">Inventory: @firstPlayerInventory</span>
                <span id="first-player-backorder">Backorder: @firstPlayerBackorder</span>
            </div>
            <div class="second-player-text" style="top: 65px">
                <span id="second-player-role" style="text-align:center" class="tertiary-text">@secondPlayerRole</span>
                <span id="second-player-name" style="text-align:center" class="secondary-text">@secondPlayerName</span>
                <span id="second-player-inventory" style="margin-top: 50px">Inventory: @secondPlayerInventory</span>
                <span id="second-player-backorder">Backorder: @secondPlayerBackorder</span>
            </div>
            <div class="third-player-text" style="top: 65px">
                <span id="third-player-role" style="text-align:center" class="tertiary-text">@thirdPlayerRole</span>
                <span id="third-player-name" style="text-align:center" class="secondary-text">@thirdPlayerName</span>
                <span id="third-player-inventory" style="margin-top: 50px">Inventory: @thirdPlayerInventory</span>
                <span id="third-player-backorder">Backorder: @thirdPlayerBackorder</span>
            </div>
        }
        else
        {
            <div class="first-player-text">
                <span id="first-player-role" style="text-align:center" class="tertiary-text">@firstPlayerRole</span>
                <span id="first-player-name" style="text-align:center" class="secondary-text">@firstPlayerName</span>
                <span id="first-player-inventory" style="margin-top: 50px"></span>
                <span id="first-player-backorder"></span>
            </div>
            <div class="second-player-text">
                <span id="second-player-role" style="text-align:center" class="tertiary-text">@secondPlayerRole</span>
                <span id="second-player-name" style="text-align:center" class="secondary-text">@secondPlayerName</span>
                <span id="second-player-inventory" style="margin-top: 50px"></span>
                <span id="second-player-backorder"></span>
            </div>
            <div class="third-player-text">
                <span id="third-player-role" style="text-align:center" class="tertiary-text">@thirdPlayerRole</span>
                <span id="third-player-name" style="text-align:center" class="secondary-text">@thirdPlayerName</span>
                <span id="third-player-inventory" style="margin-top: 50px"></span>
                <span id="third-player-backorder"></span>
            </div>

        }

        <div class="harvester-text">
            <span style="text-align:center" class="tertiary-text">Harvester</span>
        </div>
        <div class="backorder-value">
            <span id="backorder-@Model.Role.Id" style="margin-bottom:5%" class="head-text">@Model.Backorder</span>
        </div>
        <div class="backorder-text">
            <span style="text-align:center" class="secondary-text">Backorder</span>
        </div>
        <div class="incoming-order-value">
            <span id="incoming-order-@Model.Role.Id" style="margin-bottom:5%" class="head-text">@Model.IncomingOrders.Where(o => o.OrderDay == currentDay - Factors.RoundIncrement).Sum(o => o.Volume)</span>
        </div>
        <div class="incoming-order-text">
            <span style="text-align:center" class="secondary-text">Incoming order</span>
        </div>
        <div class="inventory-value">
            <span id="inventory-@Model.Role.Id" style="margin-bottom:5%" class="head-text">@Model.Inventory</span>
        </div>
        <div class="inventory-text">
            <span style="text-align:center" class="secondary-text">Inventory</span>
        </div>
        <div class="inventory-flush">
            <button class="flush-button gradient tertiary-text" style="color:white" id="flushButton">Flush</button>
        </div>
        <div class="incoming-delivery-value">
            <span id="incoming-delivery-@Model.Role.Id" style="margin-bottom:5%" class="head-text">@Model.OutgoingOrders.Sum(o => o.Deliveries.Where(d => d.ArrivalDay <= currentDay && d.ArrivalDay > currentDay - Factors.RoundIncrement).Sum(d => d.Volume))</span>
        </div>
        <div class="incoming-delivery-text">
            <span id="incoming-delivery-@Model.Role.Id" style="text-align:center" class="secondary-text">Incoming delivery</span>
        </div>
    </div>
    <div>
        <div class="top-right-canvas gradient box">
            <span style="color:white; margin-top:-5px;" class="main-text">@Model.Name</span>
            <span style="color:white" class="secondary-text">@Model.Role.Id</span>
        </div>
        <div class="right-canvas box">
            <span class="main-text">Cash position</span>
            <div class="cash-position-box">
                <span class="secondary-text">Whole supplychain status</span>
                <span class="tertiary-text cash-position-value">Balance: <span id="balance-team" class="gradient-font">@balanceTeam-</span></span>
                <span class="tertiary-text cash-position-value">Profit: <span id="profit-team" class="gradient-font">@profitTeam-</span></span>
            </div>
            <div class="cash-position-box">
                <span class="secondary-text">Your supplychain status</span>
                <span class="tertiary-text cash-position-value">Balance: <span id="balance-@Model.Role.Id" class="gradient-font">@balancePlayer-</span></span>
                <span class="tertiary-text cash-position-value">Profit: <span id="profit-@Model.Role.Id" class="gradient-font">@profitPlayer-</span></span>
            </div>
        </div>
    </div>
</div>
<div class="bottom-container" style="@containerDisplay">
    <div class="bottom-canvas box">
        <div>
            <span id="current-round" style="width:fit-content" class="main-text gradient-font">@currentRound</span>
            <span style="margin-left:-3px" id="ordinal-suffix" class="tertiary-text gradient-font">@ordinalSuffix</span>
        </div>
        <span class="secondary-text">Round</span>
    </div>
    <div style="padding:0px" class="bottom-canvas box">
        <input id="place-order-text" name="order" class="input secondary-text" type="number" placeholder="Insert order..." min="0" oninput="validity.valid||(value='');">
        <input id="place-order-button" style="color:white;filter:grayscale(100%);" class="order-button gradient secondary-text" type="button" value="Place order" disabled>
        <div style="position: absolute; top: -44px; left: 108px;display:none" class="cssload-jumping">
            <span></span><span></span><span></span><span></span><span></span>
        </div>
    </div>
    <div class="bottom-canvas box">
        <span class="main-text">Order history</span>
        <span class="tertiary-text">Last order: <span id="last-order-@Model.Role.Id" class=" secondary-text gradient-font">@lastOrder</span></span>
    </div>
</div>
<div class="info-container" style="@containerDisplay">
    <div>
        <div class="profitcosts-canvas box">
            <span class="main-text">Profit</span>
            <div id="profit-box" class="profitcosts-box">
                @foreach (Payment payment in Model.Payments)
                {
                    if (payment.Amount >= 0 && payment.DueDay <= currentDay && payment.DueDay > currentDay - Factors.RoundIncrement)
                    {
                        <span class="secondary-text">@payment.Topic: <span style="color:green">€@payment.Amount,-</span></span>
                    }
                }
            </div>
        </div>
        <div class="profitcosts-canvas box">
            <span class="main-text">Costs</span>
            <div id="costs-box" class="profitcosts-box">
                @foreach (Payment payment in Model.Payments)
                {
                    if (payment.Amount < 0 && payment.DueDay <= currentDay && payment.DueDay > currentDay - Factors.RoundIncrement)
                    {
                        <span class="secondary-text">@payment.Topic: <span style="color:red">-€@payment.Amount,-</span></span>
                    }
                }
            </div>
        </div>
        <div class="total-canvas gradient box">
            <span class="main-text" style="color: white">Total: <span id="total-text" style="color:@totalProfitCostsColor">@totalProfitCostsString</span></span>
        </div>
    </div>
    <div class="history-canvas box" style="padding:0px">
        <table id="history-table" class="history-table">
            <tr class="gradient">
                <th class="secondary-text">Round</th>
                <th class="secondary-text">Order</th>
                <th class="secondary-text">Effective inventory</th>
                <th class="secondary-text">Received</th>
                <th class="secondary-text">Sent</th>
            </tr>
            @for (int i = 0; i <= currentDay - Factors.RoundIncrement; i += Factors.RoundIncrement)
            {
                <tr>
                    <td class="tertiary-text">Round @round</td>
                    <td class="tertiary-text">@Model.SentCurrentOrderHistory[round - 1]</td>
                    <td class="tertiary-text">@(Model.InventoryHistory[round - 1] - Model.BackorderHistory[round - 1])</td>
                    <td class="tertiary-text">@Model.RecievedOrderHistory[round - 1]</td>
                    <td class="tertiary-text">@Model.SentOrdersHistory[round - 1]</td>
                </tr>
                { round++; }
            }
        </table>
    </div>
</div>



@section Scripts{
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.3.0/dist/chart.min.js"></script>
    <script src="~/js/BeerGame.js"></script>
    <script>
        $(document).ready(() => {
            BeerGame.init("@gameId", "@Model.Id", "@ViewData["RestApiUrl"]");
            BeerGame.waiting = @waiting;

            $("#place-order-button").on('click', BeerGame.Signal.sendOrder);
            $("#flushButton").on('click', BeerGame.Signal.flushInventory);

            if (@if (thirdPhaseNotReady)
                {@Html.Raw("true || ")
                    ;
                }
    @currentDay == 7 * 8 + 1 && "@if (Model.ChosenOption != null)
                                 {@Html.Raw(Model.ChosenOption.Name)
                                     ;
                                 }
                                 else
                                 {@Html.Raw("null")
                                     ;
                                 }" == "Basic") {
                BeerGame.promptOptions('@Html.Raw(JsonConvert.SerializeObject(players))');
                @foreach (Player player in players)
                {
                    if (player.ChosenOption != null) @Html.Raw($"BeerGame.updatePromptOptions('{JsonConvert.SerializeObject(player)}');\n")
                    ;
                }
            }

            if ("@Model.Role.Id" == "Retailer") {
                $(".main-canvas").css("background", "url('/images/retailer.png'), white");
            }
            else if ("@Model.Role.Id" == "Manufacturer") {
                $(".main-canvas").css("background", "url('/images/manufacturer.png'), white");
            }
            else if ("@Model.Role.Id" == "Processor") {
                $(".main-canvas").css("background", "url('/images/processor.png'), white");
            }
            else if ("@Model.Role.Id" == "Farmer") {
                $(".main-canvas").css("background", "url('/images/farmer.png'), white");
            }
            $(".main-canvas").css("background-size", "contain");
            $(".main-canvas").css("background-repeat", "no-repeat");
            $(".main-canvas").css("background-position", "center");

            if (@waiting) {
                $("#place-order-button").prop("disabled", true);
                $("#place-order-button").css("filter", "grayscale(100%)");
                $("#place-order-button").val("");
                $(".cssload-jumping").show();
            }

            if (@Model.Inventory < 1) {
                $("#flushButton").prop("disabled", true);
                $("#flushButton").css("filter", "grayscale(100%)");
                $("#flushButton").val("");
            }

            function insertOrder() {
                if ($("#place-order-text").val() != "" && BeerGame.waiting == false) {
                    $("#place-order-button").prop("disabled", false);
                    $("#place-order-button").css("filter", "");
                } else {
                    $("#place-order-button").prop("disabled", true);
                    $("#place-order-button").css("filter", "grayscale(100%)");
                }
            }
            $("#place-order-text").keyup(insertOrder);
        });
    </script>
}